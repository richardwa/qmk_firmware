#include "ledmatrix.h"
#include "cpp-utility.h"
#include <util/atomic.h>

#define PERIOD 15
#define NUMCOLORS 2
#define PORT(x) PORT##x 
#define CTRL(x) DDR##x 

//memory map of led states
// instead of holding physical state (row x cols), we are holding 
// pin state per cycle to minimize transformations on reading 
#define STATESIZE (PERIOD * ROWSIZE * NUMCOLORS)
#define STATEINDEX(p,r,c) ((p) * ROWSIZE * NUMCOLORS) + ((r) * NUMCOLORS) + (c)

static volatile uint8_t state[STATESIZE][SIZE(ALLP)] = {{0}};
static volatile uint8_t cycle = 0;
void ledMatrixInit(){
//set ports to output    
#define lambda(mask,p) \
    CTRL(p) |= mask;
    MAP2(lambda,EMPTY,ALLMASK,ALLP)
#undef lambda

    //set row states, these show remain constant after being set here
    for (uint8_t j=0;j<(PERIOD);j++){
#define nested(pinmask,i,row) \
    state[STATEINDEX(j,row,0)][i] = pinmask; \
    state[STATEINDEX(j,row,1)][i] = pinmask; 

#define lambda(index) \
    MAP3(nested,EMPTY,ROW##index,IDX(ALLP),REPEAT(index,ALLP))
    MAP(lambda,EMPTY,IDXNUM(ROWSIZE))
#undef lambda 
#undef nested 
    }
    //set initial matrix state
    for (uint8_t i=0;i<NUMROWS;i++){
        for (uint8_t j=0;j<NUMROWS;j++){
            uint8_t red  = i * (PERIOD+1) / (NUMROWS-1);
            uint8_t blue = (NUMCOLS - j) * (PERIOD+1) / (NUMCOLS-1);
            setState(i,j,red|(blue << 4));
        }
    }
}

//value is 0-15 indicating intensity, first half is for blue then red
// 0 - off
// 1 - 2/16 frames, every frame in period
// 2 every 2 frames,
// 3 every 3 frames, and so on
void setState(uint8_t row, uint8_t col, uint8_t value){
    //ranges from 1 to PERIOD + 1
    uint8_t blueMod = PERIOD - (0x0F & value) + 1;
    uint8_t redMod  = PERIOD - (value >> 4) +1;

    for (int j=0;j<PERIOD;j++){
#define nested(pinmask,i) \
    if ((j+1)%blueMod) state[STATEINDEX(j,row,0)][i] &= ~(pinmask);\
        else       state[STATEINDEX(j,row,0)][i] |=   pinmask; \
    if ((j+1)%redMod)  state[STATEINDEX(j,row,1)][i] &= ~(pinmask);\
        else       state[STATEINDEX(j,row,1)][i] |=   pinmask; 

#define lambda(index) \
        if (col == index){ \
    MAP2(nested,EMPTY,COL##index,IDX(ALLP)) \
        }

    MAP(lambda,EMPTY,IDXNUM(COLSIZE))

#undef lambda 
#undef nested 
    }
}

void draw(){

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    //declare holders for all ports
    //apply mask on holders
    //also need control port to set all low pins to input/disconnected state
#define lambda(mask,p,i) \
    uint8_t port_##p = PORT(p); \
    uint8_t ctrl_##p = (~(mask) & CTRL(p)) | ((mask) & state[cycle][i]);
    MAP3(lambda,EMPTY,ALLMASK,ALLP,IDX(ALLP))
#undef lambda

    //flag for current color in cycle
    uint8_t color = (cycle % NUMCOLORS) == 1;
    uint8_t someColumnOn = 0;

    //set columns
#define lambda(mask,p,i) \
    someColumnOn |= (mask) & state[cycle][i]; \
    port_##p = (~(mask) & port_##p) | ((mask) & (color ? \
            ~(state[cycle][i]):(state[cycle][i])));
    MAP3(lambda,EMPTY,COLMASK,ALLP,IDX(ALLP))
#undef lambda
   
    //set rows
#define lambda(mask,p,i) \
    if (!someColumnOn) ctrl_##p &= ~(mask); \
    port_##p = (~(mask) & port_##p) | ((mask) & (color ? \
            (state[cycle][i]):~(state[cycle][i])));
    MAP3(lambda,EMPTY,ROWMASK,ALLP,IDX(ALLP))
#undef lambda

    //assign holders into ports
#define lambda(p) \
    PORT(p) = port_##p;
    MAP(lambda,EMPTY,ALLP)
#undef lambda
#define lambda(p) \
    CTRL(p) = ctrl_##p;
    MAP(lambda,EMPTY,ALLP)
#undef lambda
    }
    cycle++;
    if (cycle >= STATESIZE){
        cycle = 0;
    }

}
